import numpy as np
import sympy as sy
from sympy import solve_linear_system
from sympy import*
from openpyxl.workbook import *
from openpyxl import load_workbook

sy.init_printing()

wb=load_workbook('all_datos.xlsx')
inertia_sheet=wb['inertias']
span_sheet=wb['span_lengths']
fem_sheet=wb['fixed_end_moments']

L=[]
I=[]
col_inertia=inertia_sheet['a']
span=len(col_inertia)
col_len=span_sheet['a']

for i in range(0,len(inertia_sheet['a'])):
    I.append(col_inertia[i].value)
    

for i in range(0,len(inertia_sheet['a'])):
    
    L.append(col_len[i].value)
    
for i in range(0,100):
    L.append(99)
    I.append(99)






mother=sy.Matrix([
                [2*I[0]/L[0],4*I[0]/L[0]+4*I[1]/L[1],2*I[1]/L[1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,2*I[1]/L[1],4*I[1]/L[1]+4*I[2]/L[2],2*I[2]/L[2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,2*I[2]/L[2],4*I[2]/L[2]+4*I[3]/L[3],2*I[3]/L[3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,2*I[3]/L[3],4*I[3]/L[3]+4*I[4]/L[4],2*I[4]/L[4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,2*I[4]/L[4],4*I[4]/L[4]+4*I[5]/L[5],2*I[5]/L[5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,2*I[5]/L[5],4*I[5]/L[5]+4*I[6]/L[6],2*I[6]/L[6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,2*I[6]/L[6],4*I[6]/L[6]+4*I[7]/L[7],2*I[7]/L[7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,2*I[7]/L[7],4*I[7]/L[7]+4*I[8]/L[8],2*I[8]/L[8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,2*I[8]/L[8],4*I[8]/L[8]+4*I[9]/L[9],2*I[9]/L[9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,2*I[9]/L[9],4*I[9]/L[9]+4*I[10]/L[10],2*I[10]/L[10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,2*I[10]/L[10],4*I[10]/L[10]+4*I[11]/L[11],2*I[11]/L[11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,2*I[11]/L[11],4*I[11]/L[11]+4*I[12]/L[12],2*I[12]/L[12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,2*I[12]/L[12],4*I[12]/L[12]+4*I[13]/L[13],2*I[13]/L[13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[13]/L[13],4*I[13]/L[13]+4*I[14]/L[14],2*I[14]/L[14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[14]/L[14],4*I[14]/L[14]+4*I[15]/L[15],2*I[15]/L[15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[15]/L[15],4*I[15]/L[15]+4*I[16]/L[16],2*I[16]/L[16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[16]/L[16],4*I[16]/L[16]+4*I[17]/L[17],2*I[17]/L[17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[17]/L[17],4*I[17]/L[17]+4*I[18]/L[18],2*I[18]/L[18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[18]/L[18],4*I[18]/L[18]+4*I[19]/L[19],2*I[19]/L[19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[19]/L[19],4*I[19]/L[19]+4*I[20]/L[20],2*I[20]/L[20],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[20]/L[20],4*I[20]/L[20]+4*I[21]/L[21],2*I[21]/L[21],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[21]/L[21],4*I[21]/L[21]+4*I[22]/L[22],2*I[22]/L[22],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[22]/L[22],4*I[22]/L[22]+4*I[23]/L[23],2*I[23]/L[23],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[23]/L[23],4*I[23]/L[23]+4*I[24]/L[24],2*I[24]/L[24],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[24]/L[24],4*I[24]/L[24]+4*I[25]/L[25],2*I[25]/L[25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[25]/L[25],4*I[25]/L[25]+4*I[26]/L[26],2*I[26]/L[26],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[26]/L[26],4*I[26]/L[26]+4*I[27]/L[27],2*I[27]/L[27],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[27]/L[27],4*I[27]/L[27]+4*I[28]/L[28],2*I[28]/L[28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[28]/L[28],4*I[28]/L[28]+4*I[29]/L[29],2*I[29]/L[29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[29]/L[29],4*I[29]/L[29]+4*I[30]/L[30],2*I[30]/L[30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[30]/L[30],4*I[30]/L[30]+4*I[31]/L[31],2*I[31]/L[31],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[31]/L[31],4*I[31]/L[31]+4*I[32]/L[32],2*I[32]/L[32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[32]/L[32],4*I[32]/L[32]+4*I[33]/L[33],2*I[33]/L[33],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[33]/L[33],4*I[33]/L[33]+4*I[34]/L[34],2*I[34]/L[34],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[34]/L[34],4*I[34]/L[34]+4*I[35]/L[35],2*I[35]/L[35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[35]/L[35],4*I[35]/L[35]+4*I[36]/L[36],2*I[36]/L[36],0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[36]/L[36],4*I[36]/L[36]+4*I[37]/L[37],2*I[37]/L[37],0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[37]/L[37],4*I[37]/L[37]+4*I[38]/L[38],2*I[38]/L[38],0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[38]/L[38],4*I[38]/L[38]+4*I[39]/L[39],2*I[39]/L[39],0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[39]/L[39],4*I[39]/L[39]+4*I[40]/L[40],2*I[40]/L[40],0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[40]/L[40],4*I[40]/L[40]+4*I[41]/L[41],2*I[41]/L[41],0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[41]/L[41],4*I[41]/L[41]+4*I[42]/L[42],2*I[42]/L[42],0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[42]/L[42],4*I[42]/L[42]+4*I[43]/L[43],2*I[43]/L[43],0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[43]/L[43],4*I[43]/L[43]+4*I[44]/L[44],2*I[44]/L[44],0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[44]/L[44],4*I[44]/L[44]+4*I[45]/L[45],2*I[45]/L[45],0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[45]/L[45],4*I[45]/L[45]+4*I[46]/L[46],2*I[46]/L[46],0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[46]/L[46],4*I[46]/L[46]+4*I[47]/L[47],2*I[47]/L[47],0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[47]/L[47],4*I[47]/L[47]+4*I[48]/L[48],2*I[48]/L[48],0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[48]/L[48],4*I[48]/L[48]+4*I[49]/L[49],2*I[49]/L[49],0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[49]/L[49],4*I[49]/L[49]+4*I[50]/L[50],2*I[50]/L[50]],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*I[50]/L[50],4*I[50]/L[50]+4*I[51]/L[51]]
    
    
    
    
    
                ])



                                                                                                                                                                                                                                                                            ####

  


order1=span-1
for i in range (order1,51):
    mother.row_del(order1)
    mother.col_del(order1+1)

##


'''no_of_zeros=mother.shape[1]-2'''
first_eqn=zeros(1, mother.shape[1])
first_eqn[0]=4*I[0]/L[0]
first_eqn[1]=2*I[0]/L[0]


   
final_mat=np.vstack([first_eqn,mother])



#######lhs ok



last_fem_serial=len(fem_sheet['a'])    


first_fem=-1*fem_sheet['a1'].value

sec_lim=(last_fem_serial-2)/2
fem_for_mid_eqn=[]
fem_for_mid_eqn.append(first_fem)
a=2
for i in range(0,int(sec_lim)):
    gg=-1*(fem_sheet.cell(column=1,row=a).value+fem_sheet.cell(column=1,row=a+1).value)
    fem_for_mid_eqn.append(gg)
    a=a+2

constant2_matrix=sy.Matrix([fem_for_mid_eqn])

constant_matrix=constant2_matrix.transpose()

print(constant_matrix)



################

final_mat_under_sympy=sy.Matrix(final_mat)



solution=final_mat_under_sympy.inv()*constant_matrix





print("\n\n")

fem=[]
for i in range(1,last_fem_serial+1):
    fem.append(fem_sheet.cell(column=1,row=i).value)


soln=[]

for i in solution:
    soln.append(i)
soln.append(0)


for i in soln:
    print(i)
    
print("\n\n")


    
fem=[]
for i in range(1,last_fem_serial+1):
    fem.append(fem_sheet.cell(column=1,row=i).value)



thetas=len(soln)-1

z=0
moments_final=[]


print("\n\n")




for i in range(0,thetas):
    qq=fem[z]+4*I[i]*soln[i]/L[i]+2*I[i]*soln[i+1]/L[i]
    moments_final.append(qq)
    rr=fem[z+1]+2*I[i]*soln[i]/L[i]+4*I[i]*soln[i+1]/L[i]
    moments_final.append(rr)
    z=z+2

for i in moments_final:
    print(i)

moments_sheet=wb.create_sheet('moments_after_calculation')

for i in range(1,len(moments_final)+1):
    moments_sheet.cell(column=1,row=i,value=str(moments_final[i-1]))
 
wb.save('all_datos.xlsx')
